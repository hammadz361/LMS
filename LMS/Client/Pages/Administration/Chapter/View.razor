@page "/Chapter/View"
@using LMS.Shared.Models;
@inject NavigationManager Navigate
@inject HttpClient HttpModule
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IToastService toastService
@inject IJSRuntime JsRuntime

<h1>List of Chapters</h1>
@if(this.errorMessage != null){
    <div class="alert alert-danger my-5" role="alert">
      @errorMessage <a @onclick="errormsg" class="alert-link">Go to home page</a>. Click on link.
    </div>
}
@if (chapters == null){
    <div class="alert alert-danger my-5" role="alert">
      @errorMessage .
    </div>
    <button class="btn btn-primary col-4 ml-3" 
                            @onclick="CreateChapter"
                    >Add Chapter</button>
    toastService.ShowInfo("NoRecord Found", "Chapter");
}
else
{
    <table class="table table-responsive table-bordered table-striped table-hover">
        <thead>
            <tr>
                <th width="20%">Name</th>
                <th width="30%">Subject</th>
                <th width="50%">
                    <button class="btn btn-primary col-4 ml-3" 
                            @onclick="CreateChapter"
                    >Add Chapter</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var chapter in chapters)
            {
                <tr>
                    <td width="20%">@chapter.Name</td>
                    <td width="30%">@chapter.Subject.Name</td>
                    <td align="center" width="50%">
                        <button class="btn btn-success col-4" 
                                @onclick="( () => 
                                    UpdateChapter(chapter.ChapterId))"
                        >Edit</button>
                        <button class="btn btn-warning col-4" 
                                @onclick="( () => 
                                    DeleteChapter(chapter.ChapterId))"
                        >delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Chapter>? chapters = new List<Chapter>();
    private string? errorMessage;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            try
            {
                chapters = await HttpModule.GetFromJsonAsync<List<Chapter>>("api/Chapters");
            }
            catch (Exception)
            {
                toastService.ShowError("Dont Have access only admin can access this page", "Error");
                errorMessage = "Dont Have access only admin can access this page";
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
            toastService.ShowError("Invalid Server Response", "Error");
            errorMessage = "Invalid Server Reponse";
        }
    }

    public async void DeleteChapter(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await HttpModule.DeleteAsync($"api/Chapters/{id}");
            toastService.ShowError("Deleted Successfully", "Chapters");
            chapters = await HttpModule.GetFromJsonAsync<List<Chapter>>("api/Chapters");
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    public void UpdateChapter(int id)
    {
        Navigate.NavigateTo($"Chapter/Edit/{id}");
    }

    public void CreateChapter()
    {
        Navigate.NavigateTo("Chapter/Create");
    }
    public void errormsg()
    {
        Navigate.NavigateTo("Chapter/View");
    }
}
