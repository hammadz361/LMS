@page "/Video/Edit/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LMS.Shared.Models
@attribute [Authorize]
@inject HttpClient HttpModule
@inject NavigationManager Navigate
@inject IToastService toastService

@if(this.errorMessage != null){
    <div class="alert alert-danger my-5" role="alert">
      @errorMessage <a @onclick="errormsg" class="alert-link">Go to home page</a>. Click on link.
    </div>
}
<EditForm Model="@Videos" OnValidSubmit="@OnUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />
     <div class="row justify-content-center align-items-center">
        <div class="card col-sm-6 px-0">
            <h4 class="card-header  text-center">Edit Video</h4>
            <div class="card-body">
                 <div class="row">
                      <div class=col-sm>
                          <label for="name" class="form-text">Video Title</label>
                          <InputText class="form-control" id="name" @bind-Value="Videos.Name" />
                          <ValidationMessage For="@(() => Videos.Name)" />
                      </div>
                    </div>
                    <div class="row">
                      <div class=col-sm>
                          <label for="serial" class="form-text">Serial Number</label>
                          <InputText class="form-control" id="serial" @bind-Value="Videos.SerialNo" />
                          <ValidationMessage For="@(() => Videos.SerialNo)" />
                      </div>
                    </div>
                    <div class="row">
                      <div class=col-sm>
                          <label for="video" class="form-text">Video link</label>
                          <InputText class="form-control" id="video" @bind-Value="Videos.VideoLink" />
                          <ValidationMessage For="@(() => Videos.VideoLink)" />
                      </div>
                    </div>
                    <div class="row">
                         <div class="col-md">
                             <select class="form-control" @onchange="@chapterClicked">
                                 <option>@chapters[id].Name</option>
                                 @if (chapters != null)
                                 {
                                     @foreach (var chptr in chapters)
                                     {
                                         <option value="@chptr.ChapterId">@chptr.Name</option>
                                     }
                                 }
                             </select>
                         </div>
                     </div>
                    <br>
                 <button type="submit" class="btn btn-success">Edit</button>
            </div>
        </div> 
    </div> 
</EditForm>

@code {
    private Video? Videos = new();
    private IList<Chapter>? chapters = new List<Chapter>();
    private UploadedFile? uploadedFile = new();
    private string? errorMessage;
    [Parameter]public int id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            try
            {
                Videos = await HttpModule.GetFromJsonAsync<Video>($"api/Videos/{id}");
                chapters = await HttpModule.GetFromJsonAsync<IList<Chapter>>($"api/Chapters");
            }
            catch (Exception)
            {
                toastService.ShowError("Dont Have access only admin can access this page", "Error");
                errorMessage = "Dont Have access only admin can access this page";
            }
        }
        catch(AccessTokenNotAvailableException e)
        {
            e.Redirect();
            toastService.ShowInfo("Login is Necessary..", "Login");
        }
    }

    public async Task OnUpdate()
    {
        try
        {
            await HttpModule.PostAsJsonAsync($"api/Videos/{id}", Videos);
            toastService.ShowInfo("Updated Successfully", "Video");
            Navigate.NavigateTo("Video/View");
        }
        catch(Exception ex)
        {
            toastService.ShowError("Error Occured on server response", "Error");
            errorMessage = "Error Occured on server response";
        }
    }

    public void chapterClicked(ChangeEventArgs Event)
    {        
        Videos.ChapterId = int.Parse(Event.Value.ToString());
        this.StateHasChanged();
    }

    public async void LoadFiles(InputFileChangeEventArgs e)
    {
        uploadedFile = await HttpModule.GetFromJsonAsync<UploadedFile>("api/UploadedFiles/GetDirectory");
        string filePath = string.Concat(uploadedFile?.Path, e.File.Name);
        var model = e.File.OpenReadStream();
        var read = model.CanRead;
        using var stream = new FileStream(filePath, FileMode.Create);
        e.File.OpenReadStream().CopyToAsync(stream).GetAwaiter();
        Videos.ImagePath = string.Concat("/images/" + e.File.Name).ToString();
    }

    public void errormsg()
    {
        Navigate.NavigateTo("Video/View");
    }
}
